<Lems
      xmlns="http://www.neuroml.org/lems/0.7.4"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.neuroml.org/lems/0.7.4 ../../LEMS/Schemas/LEMS/LEMS_v0.7.4.xsd"
      description="A number of ComponentTypes for rate based/population models.
                    Base type of any cell/population which has a (dimensionless) rate _R.
                    Generic nonlinear 2-D (phase plane) oscillator.">

    <ComponentType name="Generic2dOscillator"
                   description="Rate based 2D oscillator for TVB"
                   value="">

        <Requirement name="MODEL_LIMIT" dimension="(-5, 5), (-5, 5)"/> <!-- put helping functions in util, select wrapping functions.  -->

<!--        Look at vector implementation for multi heterogenous nodes.-->

        <Constant name="tau" symbol="NArray" value="1.0" dimension="lo=1.0, hi=5.0, step=0.01"
                  description="A time-scale hierarchy can be introduced for the state variables :math:`V` and :math:`W`. Default parameter is 1, which means no time-scale hierarchy."/>
        <Constant name="I" symbol="NArray" dimension="lo=-5.0, hi=5.0, step=0.01" value="0.0" description="Baseline shift of the cubic nullcline"/>
        <Constant name="a" symbol="NArray" dimension="lo=-5.0, hi=5.0, step=0.01" value="-2.0" description="Vertical shift of the configurable nullcline"/>
        <Constant name="b" symbol="NArray" dimension="lo=-20.0, hi=15.0, step=0.01" value="-10.0" description="Linear slope of the configurable nullcline"/>
        <Constant name="c" symbol="NArray" dimension="lo=-10.0, hi=10.0, step=0.01" value="0" description="Parabolic term of the configurable nullcline"/>
        <Constant name="d" symbol="NArray" dimension="lo=0.0001, hi=1.0, step=0.0001" value="0.02" description="Temporal scale factor. Warning: do not use it unless you know what you are doing and know about time tides."/>
        <Constant name="e" symbol="NArray" dimension="lo=-5.0, hi=5.0, step=0.0001" value="3.0" description="Coefficient of the quadratic term of the cubic nullcline."/>
        <Constant name="f" symbol="NArray" dimension="lo=-5.0, hi=5.0, step=0.0001" value="1.0" description="Coefficient of the cubic term of the cubic nullcline."/>
        <Constant name="g" symbol="NArray" dimension="lo=-5.0, hi=5.0, step=0.5" value="0.0" description="Coefficient of the linear term of the cubic nullcline."/>
        <Constant name="alpha" symbol="NArray" dimension="lo=-5.0, hi=5.0, step=0.0001" value="1.0" description="Constant parameter to scale the rate of feedback from the slow variable to the fast variable."/>
        <Constant name="beta" symbol="NArray" dimension="lo=-5.0, hi=5.0, step=0.0001" value="1.0" description="Constant parameter to scale the rate of feedback from the slow variable to itself"/>
        <Constant name="gamma" symbol="NArray" dimension="lo=-1.0, hi=1.0, step=0.1" value="1.0" description="Constant parameter to reproduce FHN dynamics where excitatory input currents are negative.
It scales both I and the long range coupling term.."/>

        <!-- Parameters will be assumed to be swept. sweep data will be matched by order of entry -->
        <Parameter name="global_coupling" dimension="float" />
        <Parameter name="global_speed" dimension="float" />

        <!-- TODO: Define the observables -->
        <Exposure name="V" dimension="sin(theta_i)"/>

        <Dynamics>
            <StateVariable name="V" dimension="-2.0, 4.0" exposure="V"/>
            <StateVariable name="W" dimension="-6.0, 6.0"/>

<!--            <DerivedVariable name="coupling_value" exposure="c_0" value="0.0" reduce="add"/>-->
            <DerivedVariable name="nsig" exposure="float" value="sqrt(dt) * sqrt(2.0 * 1e-3)" reduce="add"/>
            <DerivedVariable name="rec_speed_dt" exposure="float" value="1.0f / global_speed / (dt)" reduce="add"/>
<!--            <DerivedVariable name="G" exposure="float" value="params" reduce="add"/>-->
            <DerivedVariable name="lc_0" exposure="float" value="0.0"/>

            <TimeDerivative variable="dV" exposure="dV" value="d * tau * (alpha * W - f * V**3 + e * V**2 + g * V + gamma * I + gamma * c_0 + lc_0 * V)"/>
            <TimeDerivative variable="dW" exposure="dW" value="d * (a + b * V + c * V**2 - beta * W) / tau"/>
        </Dynamics>

        <!-- Exposures are used for observables, for the name enter variable to be observed (usually states)
        and for dimension enter the reduction functionality-->
        <Exposure name="V" dimension="sin(V)"/>
        <Exposure name="W" dimension="sin(W)"/>

    </ComponentType>

    <ComponentType name="coupling_function">

<!--        Added function for pre and post synaptic activity. Fixed the power being **, however no parse checks for it-->

        <Constant name="a" symbol="NArray" dimension="lo=0.0, hi=10., step=0.1" value="0.1" description="Rescales the connection strength."/>

<!--        variables for pre synaptic function-->
        <Parameter name="V" dimension=''/>
        <Parameter name="V_j" dimension=''/>

<!--        variables for post synaptic function-->
        <Requirement name="wij" dimension=''/>

        <Function name="pre" value="sin(V_j - V)" description = "pre synaptic function for coupling activity"/>
        <Function name="post" value="wij" description = "post synaptic function for coupling activity"/>

        <!-- Handle local coupling result, full expression is c_0 *= 'value'. Name option is hardcoded -->
        <DerivedParameter name="c_0" value="global_coupling * global_speed"/>

    </ComponentType>

    <ComponentType name="connectivity matrix">

        <Parameter name="propagation_speed" dimension="float" value="1" numeric_value="2" description="3" fixed="5" fixed_value="="/>

<!--        Datastructure containing region_labels, tract_lengths, speed and weights-->
<!--        connectivity.py-->

    </ComponentType>

    <ComponentType name="noise">

<!--        Param a-->
<!--        Related to exposures?-->

<!--        StateVariables for certain noises-->
<!--        parant noise of specific children-->
<!--        ScalingFunction GFUN; noisescaling-->

<!-- dimension field for Constant is being (mis)used for fields required for Float (True or False), domain for NArray (lo, hi, step) or field_type for Attr ('str') ) -->
<!--        is label more than a short description? -->

        <Constant name="ntau" symbol="Float" dimension="True" value="0.1" description="The noise correlation time"/>
        <Constant name="noise_seed" symbol="Int" dimension="" value="42" description="A random seed used to initialise the random_stream if it is missing."/>
        <Constant name="random_stream" symbol="Attr" dimension="numpy.random.RandomState" value="0.0" description="An instance of numpy's RandomState associated with this
            specific Noise object. Used when you need to resume a simulation from a state saved to disk"/>
<!--        <Requirement name="temperature" dimension="temperature"/>-->

    </ComponentType>

    <ComponentType name="additive" extends="noise">

<!--        specific child of noise-->
        <Constant name="nsig" symbol="NArray" dimension="lo=0.0, hi=10.0, step=0.1" value="1.0"
            description="The noise dispersion, it is the standard deviation of the
distribution from which the Gaussian random variates are drawn. NOTE:
Sensible values are typically ~gt 1% of the dynamic range of a Model's
state variables."/>

    </ComponentType>

        <ComponentType name="multiplicative" extends="noise">

<!--        specific https://gitlab.version.fz-juelich.de/diaz1/tvb_dslchild of noise-->
            <Constant name="nsig" symbol="NArray" dimension="lo=0.0, hi=10.0, step=0.1" value="1.0"
            description="The noise dispersion, it is the standard deviation of the
distribution from which the Gaussian random variates are drawn. NOTE:
Sensible values are typically ~gt 1% of the dynamic range of a Model's
state variables."/>

            <Constant name="b" symbol="Attr" dimension="equations.TemporalApplicableEquation" value="0.0"
            description="A function evaluated on the state-variables, the result of which enters as the diffusion coefficient."/>

    </ComponentType>



</Lems>


<!--Look at vector representation in XML LEMS-->